import { json, LoaderFunctionArgs, ActionFunctionArgs } from "@remix-run/node";
import { requireUserId } from "~/services/auth.server";
import { createBooking, getBookingsByTeamOwnerId, getBookingsByContractorId } from "~/models/booking.server";
import { getUserById } from "~/models/user.server";
import { detectConflicts } from "~/utils/conflictDetection";
import type { ExtendedBooking } from "~/types";

export async function loader({ request }: LoaderFunctionArgs) {
  const userId = await requireUserId(request);
  const user = await getUserById(userId);

  if (!user) {
    return json({ error: "User not found" }, { status: 404 });
  }

  if (user.role === "team_owner") {
    const bookings = await getBookingsByTeamOwnerId(userId);
    return json({ bookings });
  } else if (user.role === "employee" || user.role === "contractor") {
    const bookings = await getBookingsByContractorId(userId);
    return json({ bookings });
  } else {
    return json({ error: "Unauthorized" }, { status: 403 });
  }
}

export async function action({ request }: ActionFunctionArgs) {
  const userId = await requireUserId(request);
  const user = await getUserById(userId);

  if (!user || user.role !== "team_owner") {
    return json({ error: "Unauthorized" }, { status: 403 });
  }

  const formData = await request.formData();
  const contractorId = formData.get("contractorId") as string;
  const customerFirstName = formData.get("customerFirstName") as string;
  const customerLastName = formData.get("customerLastName") as string;
  const address = formData.get("address") as string;
  const city = formData.get("city") as string;
  const state = formData.get("state") as string;
  const description = formData.get("description") as string;
  const dateTime = new Date(formData.get("dateTime") as string);

  try {
    const newBooking: ExtendedBooking = {
      id: '', // This will be generated by Prisma
      teamOwnerId: userId,
      contractorId,
      customerFirstName,
      customerLastName,
      address,
      city,
      state,
      description,
      dateTime,
      createdAt: new Date(),
      updatedAt: new Date()
    };

    const existingBookings = await getBookingsByContractorId(contractorId);
    const conflicts = detectConflicts(newBooking, existingBookings);

    if (conflicts.length > 0) {
      return json({ error: "Booking conflicts detected", conflicts }, { status: 409 });
    }

    const booking = await createBooking(
      userId,
      contractorId,
      customerFirstName,
      customerLastName,
      address,
      city,
      state,
      description,
      dateTime
    );
    return json({ booking });
  } catch (error) {
    return json({ error: "Failed to create booking" }, { status: 500 });
  }
}