generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String       @id @default(uuid())
  email               String       @unique
  password            String
  googleCalendarId    String?
  teamOwnerId         String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  invitedByTeamOwner  String?
  hasUnreadInvitation Boolean      @default(false)
  apiKey              String?      @unique
  tier                String       @default("basic")
  usageCount          Int          @default(0)
  bookings            Booking[]    @relation("ContractorBookings")
  ownedBookings       Booking[]    @relation("TeamOwnerBookings")
  events              Event[]
  sentInvitations     Invitation[]
  teamOwner           User?        @relation("TeamMembers", fields: [teamOwnerId], references: [id])
  teamMembers         User[]       @relation("TeamMembers")
  roles               UserRole[]   @relation("UserToUserRole")
}

model UserRole {
  id    String @id @default(uuid())
  name  String @unique
  users User[] @relation("UserToUserRole")
}

model Invitation {
  id          String   @id @default(cuid())
  email       String
  teamOwnerId String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  teamOwner   User     @relation(fields: [teamOwnerId], references: [id])
}

model Booking {
  id                String   @id @default(uuid())
  teamOwnerId       String
  contractorId      String
  customerFirstName String
  customerLastName  String
  address           String
  city              String
  state             String
  description       String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  endDateTime       DateTime
  startDateTime     DateTime
  contractor        User     @relation("ContractorBookings", fields: [contractorId], references: [id])
  teamOwner         User     @relation("TeamOwnerBookings", fields: [teamOwnerId], references: [id])
}

model Event {
  id          String   @id @default(uuid())
  userId      String
  title       String
  start       DateTime
  end         DateTime
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}
